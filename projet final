#include <iostream>
#include <string>
#include <iomanip>
#include <cmath>
#include <limits>

using namespace std;
    
    // Auxiliary functions
    double f(double Amount, double Years, double anInterestRate, double Instalment) 
    {
        float temp;
        temp = anInterestRate*(1+ (1/((pow(1+anInterestRate, Years)-1)))) - (Instalment / Amount);
        return temp;
        } // Function f(PV, n, r, PMT) = r * ( 1 + ( 1 / ( ( 1 + r) ^ n - 1 ) - PMT / PV 
        
    double binSearch(double Amount, double NbOfPeriod,double Instalment)
    {
        double a=0.000001, b=2, precision=0.0001,m, fm, fa,fb;
        
        fa = f(Amount, NbOfPeriod, a,  Instalment);
        fb = f(Amount, NbOfPeriod, b,  Instalment);
    
            while ( b-a > precision )
            {
                m = (b + a) / 2;
                fm = f(Amount, NbOfPeriod, m,  Instalment);
                if (fm == 0) break;
        
                if (fa * fm < 0) 
                {
                    b = m;
                    fb = fm;
                } 
                else
                {
                    a = m;
                    fa = fm;
                }
            }
            return m ;
    } // Function to find missing rate by a Binary Search Method
        
    double whichMiss()
    {
        double ans;
        cout << "Only three out of Amount, Number of years, IR and Instalments can be entered. Which one you DON'T want to enter ? \n 1 for Amount, 2 for Number of Years, 3 for the annual Interest Rate and 4 for periodic Instalment "<< endl;
        cin  >> ans;
        ans = floor (ans);
        while ((cin.fail()) || (ans<1) || (ans >4))
        {
            cin.clear();
            cin.ignore();
            cout << "Not a valid Input. Please try again (positive): ";
            cin >> ans;
            cout<<"\n";
        }
            return ans;
        } // Enter which variable will be calculated and not inputed by the user 
    
    double findAmount(double Years, double anInterestRate, double Instalment)
    {
        double Amount;
        Amount=(Instalment/anInterestRate)*(pow((1+anInterestRate),Years) -1)/(pow((1+anInterestRate),Years)) ;
        cout << "Given the inputs given, the loanable Amount is :" << Amount << " €."<< endl;
        return Amount;
    } // find Amount when not inputed
    
    double findYears(double Amount, double anInterestRate, double Instalment, double periodMultiplier)
    {
        double Years;
        Years=log(1 + 1/((Instalment*periodMultiplier/(Amount*anInterestRate))-1))/log(1+anInterestRate); 
        cout << "Given the inputs given, the Loan can be reimbursed in :" << floor(Years*periodMultiplier)/periodMultiplier << " years."<< endl;
        return Years;
    } // find Number of Years when not inputed
    
    double findAnInterestRate(double Amount, double Years, double Instalment, double periodMultiplier) 
    {
        double periodInterestRate, anInterestRate, NbOfPeriod;
        NbOfPeriod = Years * periodMultiplier;
        periodInterestRate = binSearch(Amount, NbOfPeriod, Instalment);
        anInterestRate = periodInterestRate * periodMultiplier;
        cout << "Given the inputs given, the annual Interest Rate is " << anInterestRate << " %."<< endl;
        return anInterestRate;
    } // find annual Interest Rate when not inputed
    
    double findInstalment(double Amount, double Years, double anInterestRate, double periodMultiplier) 
    {
        double Instalment;
        Instalment=(Amount*anInterestRate*(1+(1/(pow((1+anInterestRate),Years) -1))))/periodMultiplier;
        cout << "Given the inputs given, the periodic Instalment is " << Instalment << " €."<< endl;
        return Instalment;
    } // find Instalment when not inputed
    
    double CheckAmount()
    {
        double n;
        cout << "Plase provide an appropriate Loan Amount (positive) : ";
        cin >> n;
        while(1)
            {
                if (cin.fail() || n<=0) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Plase provide an appropriate Loan Amount (positive) : ";
                cin >> n;

            }
                if (!cin.fail())
                break;
            }
        return n;
    } // Cout and Safeguard for Amount
    
    double CheckInstalment()
    {
        double n, maxInstalment ;
        cout << "Please provide periodic Instalment Amount :";
        cin >> n;
        while(1)
            {
                if (cin.fail() || n<=0) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Plase provide an appropriate Instalment Amount : ";
                cin >> n;

            }
                if (!cin.fail())
                break;
            }
        return n;

    } // Cout and Safeguard for Instalment
    
    string CheckSchedule()
    {
        double n;
        string F;
        cout << "Please enter an appropriate Reimbursment Schedule. \n 1 for Annually, 2 for Semi-Annually, 3 for Quarterly and 4 for Monthly : ";
        cin >> n;
        while(1)
            {
                if (cin.fail() || n<1 ||n>4) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Plase provide an appropriate Reimbursment Schedule. \n 1 for Annually, 2 for Semi-Annually, 3 for Quarterly and 4 for Monthly : ";
                cin >> n;

            }
                if (!cin.fail())
                break;
            }
        n=floor ( n);
        if (n==1)
	    {
	        F ="Annually";
	    }
	    else if (n==2)
	    {
	        F ="Semi-Annually";
	    }
	    else if (n==3) 
	    {
	        F ="Quarterly";
	    }
	    else if (n==4)
	    {
	        F ="Monthly";
	    }
	    return F;
    } // Cout and Safeguard for Schedule

    double CheckIR()
    {
        double n;
        cout << "Please provide ANNUAL Interest Rate (5 for 5%, between 0% and 100%) :";
        cin >> n;
        n/=100;
        while(1)
            {
                if (cin.fail() || (n<0) || (n > 1)) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Plase provide an appropriate ANNUAL Interest Rate (5 for 5%, between 0% and 100%) : ";
                cin >> n;

            }
                if (!cin.fail())
                break;
            }
        return n;
    } // Cout and Safeguard for annual Interest rate
    
    double CheckYears()
    {
        double n;
        cout << "Please provide number of Years (18,5 years equals to 18y and 6 months) :";
        cin >> n;
        while(1)
            {
                if (cin.fail() || n<0) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Please provide number of Years (18,5 years equals to 18y and 6 months) :";

            }
                if (!cin.fail())
                break;
            }
        return n;
    } // Cout and Safeguard for number of Years 

    double CheckMonth()
    {
        double n;
        cout << "Please provide start Month (between 1(=January) and 12(=December)) :";
        cin >> n;
        while(1)
            {
                if (cin.fail() || (n < 1) || (n > 12)) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Please enter an appropriate starting Month (between 1(=January) and 12(=December)) :";

            }
                if (!cin.fail())
                break;
            }
        return n;
    } // Cout and Safeguard for starting Month
    
    double CheckStartYear()
    {
        double n;
        cout << "Please provide start Year :";
        cin >> n;
        while(1)
            {
                if (cin.fail() || (n < 0)) 
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(),'\n');
                cout << "Please enter an appropriate starting Year (positive) :";

            }
                if (!cin.fail())
                break;
            }
        return floor(n);
    } // Cout and Safeguard for starting Year
        
    double ComputPeriodMultiplier(string Frequency)
    {
    double n; 
    
        
    	    {   
        	    if (Frequency=="Annually" )
        	    {
        	        n = 1.00 ;    	        
        	    }
        	    else if (Frequency=="Semi-Annually")
        	    {
        	        n = 2.00;
        	    }
        	    else if (Frequency=="Quarterly")
        	    {
        	        n = 4.00 ;
        	    }
        	    else if (Frequency=="Monthly")
        	    {
        	        n = 12.00;
        	    } 
        	    
            	return n ;
    	    } 
    	    
} // Compute the period multiplier (12, 3, 2 or 1)
               
    void Display(double Amount, double Years, double anInterestRate, double Instalment, double NbOfPeriod, string Frequency, double startMonth, double startYear)
    {
        
            cout <<"\n      Inputs :"<< endl;
            cout <<"___________________________"<< endl;
            cout <<"| Present Value : $"<< Amount  << endl;
            cout <<"| Frequency : "<< Frequency << endl;
            cout <<"| # of periods : "<< NbOfPeriod << endl;
            cout <<"| Interest Rate : "<< anInterestRate*100 << "%"<< endl;
            cout <<"| Instalments : $"<< Instalment << endl;
            cout <<"| Start Date : "<< startMonth <<"/"<< startYear<< endl;
            cout <<"|__________________________" ;
    } // Print-out the Inputs after calculation 
    
    void Display2(double periodNumber, double Amount, double periodInterestRate, double Instalment, double startMonth, double startYear, double principal, double periodInterest, double closingBalance)
    {
        cout<< periodNumber <<"  |   "<<startMonth <<"/"<< startYear << "  |   "<< Amount <<"  |   "<< principal << "  |  "<< periodInterest << "  |  "<< periodInterestRate * 100 << "%" << "  |   "<< Instalment << "   |  "<< closingBalance  <<"   |"<< endl;
    } // Used to print out the table 
    
    int consistency(double Amount, double Years, double anInterestRate, double Instalment, double periodMultiplier)
    {
        if (Amount*anInterestRate > Instalment * periodMultiplier)
        {
            cout <<"The interests cannot be larger dans the Instalments ! Try again."<<endl;
            return 0;
        }
        if (anInterestRate>1)
        {
            cout <<"The annual is superior than 100%. Try again !"<<endl;
            return 0;
        }
        if (Years > 100)
        {
            cout << "It would took more than 100 years to reimburse this Loan. Try again ! "<< endl;
            return 0;
        }
    }
	    
    void Inputs()
    {
    // Declaring Variables
        double Amount, Instalment, NbOfPeriod, closingBalance, periodMultiplier = 0.00, anInterestRate, periodInterestRate ;
        double periodNumber, periodInterest, principal,Years, startMonth, startYear, temp, temp2 ;   
        string Frequency;   
        
    // Inputs  
        cout << "We are entering the values we need ! "<< endl;
        Frequency = CheckSchedule();
        periodMultiplier = ComputPeriodMultiplier(Frequency);
        temp = whichMiss();
        
        if (temp == 1)
        {
            do 
            {
            Years = CheckYears() ;
            anInterestRate = CheckIR();
            Instalment = CheckInstalment();
            Amount = findAmount(Years, anInterestRate, Instalment);
            temp2 = consistency(Amount,  Years,  anInterestRate,  Instalment, periodMultiplier);
            } while(temp2==0);
        }
        else if (temp == 2)
        {
            do
            {
            Amount = CheckAmount();        
            anInterestRate = CheckIR();
            Instalment = CheckInstalment();
            Years = findYears(Amount,anInterestRate, Instalment, periodMultiplier);
            temp2 = consistency(Amount,  Years,  anInterestRate,  Instalment, periodMultiplier);
            } while(temp2==0);
        }
        else if (temp == 3)
        {
            do
            {
            Amount = CheckAmount();        
            Years = CheckYears();
            Instalment = CheckInstalment();
            anInterestRate = findAnInterestRate(Amount, Years, Instalment, periodMultiplier);
            temp2 = consistency(Amount,  Years,  anInterestRate,  Instalment, periodMultiplier);
            } while(temp2==0);
        }
        else if (temp == 4)
        {
            do
            {
            Amount = CheckAmount();        
            Years = CheckYears() ;
            anInterestRate = CheckIR();
            Instalment = findInstalment(Amount, Years, anInterestRate, periodMultiplier);
            temp2 = consistency(Amount,  Years,  anInterestRate,  Instalment, periodMultiplier);
            } while(temp2==0);
        }
        
        startMonth = CheckMonth();
        startYear = CheckStartYear();
        NbOfPeriod = floor(Years * periodMultiplier);
        Display(Amount, Years, anInterestRate, Instalment, NbOfPeriod, Frequency, startMonth, startYear);
        periodInterestRate=anInterestRate/periodMultiplier ;
        
        if (principal < 0)
            {
                cout<< " ERROR : the annual interest rate is too important. Modify one of the inputs." ;
                cout << "\nPlease provide Present Value :";
                Amount = CheckAmount();
                cout << "Please provide Number of Years :";
                Years = CheckYears();
                cout << "Please provide ANNUAL Interest Rate :";
                anInterestRate = CheckIR();
                cout << "Please provide Instalments amount :";
                Instalment = CheckInstalment();
                principal = Instalment - Amount*periodInterestRate ;    
            }    
            periodNumber=1 ; 
        	principal = Instalment - Amount*periodInterestRate ;
        	closingBalance = Amount -principal;
            periodInterest = Amount*periodInterestRate ;

         // Initializing Variables 
        
        cout<< "\n| # |"<< " period |"<< " Op. Balance |"<< "  principal |"<<" interest |"<< "period IR|"<< "  instalment |"<< " closing Balance |" << endl;
                
                while(Amount > 0 ) 
                {
                    if (Amount - Instalment <= 0)
                    {
                        principal = Amount ;
                        
                        Instalment = Amount*periodInterestRate + principal ;
                        closingBalance = Amount - principal ;
                        
                        Display2( periodNumber,  Amount,  periodInterestRate,  Instalment,  startMonth,  startYear,  principal,  periodInterest, closingBalance);
                        closingBalance = Amount - principal ;
                        Amount = closingBalance ;
                        periodInterest = Amount*periodInterestRate ;
                        principal = Instalment - periodInterest ;
                        closingBalance=Amount-principal;  
                    }
                    else 
                    {
                        Display2( periodNumber,  Amount,  periodInterestRate,  Instalment,  startMonth,  startYear,  principal,  periodInterest, closingBalance);
                        {   
                            if (Frequency=="Monthly") 
                            {
                                if (startMonth+1 > 12)
                                {
                                    startMonth = (startMonth + 1 ) - 12 ;
                                    startYear++;
                                } 
                                else 
                                { 
                                    startMonth++;
                                    }
                            }
                            else if (Frequency=="Quarterly") 
                            {
                                if (startMonth+3 > 12)
                                {
                                    startMonth = (startMonth + 3 ) - 12 ;
                                    startYear++;
                                } 
                                else 
                                { 
                                    startMonth=startMonth+3;
                                }
                            }
                            else if (Frequency=="Semi-Annually") 
                            {
                                if (startMonth+6 > 12) 
                                {
                                    startMonth = (startMonth + 6 ) - 12 ;
                                    startYear++;
                                } 
                                else 
                                { 
                                    startMonth=startMonth+6;
                                }
                            }
                            else if (Frequency=="Annually") 
                            {
                                startYear++;
                            }
                            else
                            {
                                cout << "ERROR : The Reimbursment Schedule was wrongly computed. Try Again." << endl;
                            }
                        } // Change the date
                        closingBalance = Amount - principal ;
                        Amount = closingBalance ;
                        periodInterest = Amount*periodInterestRate ;
                        principal = Instalment - periodInterest ;
                        closingBalance=Amount-principal; 
                    }
                    periodNumber++;
                }

    } // While loop displaying the table

int main() 
{
    Inputs();
    return 0;
}

