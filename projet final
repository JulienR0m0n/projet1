#include <iostream>
#include <string>
#include <iomanip>
#include <cmath>
#include <limits>

using namespace std;
    
    // Auxiliary functions
    double f(double Amount, double Years, double anInterestRate, double Instalment) 
    {
        float temp;
        temp = anInterestRate*(1+ (1/((pow(1+anInterestRate, Years)-1)))) - (Instalment / Amount);
        return temp;
        } // Function f(PV, n, r, PMT) = r * ( 1 + ( 1 / ( ( 1 + r) ^ n - 1 ) - PMT / PV 
        
    double binSearch(double Amount, double NbOfPeriod,double Instalment)
    {
        double a=0.000001, b=2, precision=0.0001,m, fm, fa,fb;
        
        fa = f(Amount, NbOfPeriod, a,  Instalment);
        fb = f(Amount, NbOfPeriod, b,  Instalment);
    
            while ( b-a > precision )
            {
                m = (b + a) / 2;
                fm = f(Amount, NbOfPeriod, m,  Instalment);
                if (fm == 0) break;
        
                if (fa * fm < 0) 
                {
                    b = m;
                    fb = fm;
                } 
                else
                {
                    a = m;
                    fa = fm;
                }
            }
            return m ;
    } // Function to find missing rate by a Binary Search Method
        
    double whichMiss()
    {
        double ans;
        cout << "Only three out of Amount, Number of years, IR and Instalments can be entered. Which one you DON'T want to enter ? \n 1 for Amount, 2 for Number of Years, 3 for the annual Interest Rate and 4 for periodic Instalment "<< endl;
        cin  >> ans;
        ans = floor (ans);
        while ((cin.fail()) || (ans<1) || (ans >4))
        {
            cin.clear();
            cin.ignore();
            cout << "Not a valid Input. Please try again (positive): ";
            cin >> ans;
            cout<<"\n";
        }
            return ans;
        }
    
    double findAmount(double Years, double anInterestRate, double Instalment)
    {
        double Amount;
        Amount=(Instalment/anInterestRate)*(pow((1+anInterestRate),Years) -1)/(pow((1+anInterestRate),Years)) ;
        cout << "Given the inputs given, the loanable Amount is :" << Amount << " €.";
        return Amount;
    }
    
    double findYears(double Amount, double anInterestRate, double Instalment, double periodMultiplier)
    {
        double Years;
        Years=log(1 + 1/((Instalment*periodMultiplier/(Amount*anInterestRate))-1))/log(1+anInterestRate); 
        cout << "Given the inputs given, the Loan can be reimbursed in :" << floor(Years*periodMultiplier)/periodMultiplier << " years.";
        return Years;
    }
    
    double findAnInterestRate(double Amount, double Years, double Instalment, double periodMultiplier) // calculate periodMultiplier BEFORE
    {
        double periodInterestRate, anInterestRate, NbOfPeriod;
        NbOfPeriod = Years * periodMultiplier;
        periodInterestRate = binSearch(Amount, NbOfPeriod, Instalment);
        anInterestRate = periodInterestRate * periodMultiplier;
        cout << "Given the inputs given, the annual Interest Rate is " << anInterestRate << " %.";
        return anInterestRate;
    }
    
    double findInstalment(double Amount, double Years, double anInterestRate, double periodMultiplier) 
    {
        double Instalment;
        Instalment=(Amount*anInterestRate*(1+(1/(pow((1+anInterestRate),Years) -1))))/periodMultiplier;
        cout << "Given the inputs given, the periodic Instalment is " << Instalment << " €.";
        return Instalment;
    }
    
    double CheckAmount()
    {
        double n;
        cout << "\nPlease provide Loan Amount :";
        cin >> n;
        while ((cin.fail()) || (n<0))
        {
            cin.clear();
            cin.ignore();
            cout << "Not a valid Input. Please try again (positive): ";
            cin >> n;
        }
        return n;
    } // Safeguard for Amount
    
    double CheckInstalment()
    {
        double n, maxInstalment ;
        cout << "\nPlease provide periodic Instalment Amount :";
        cin >> n;
        /*maxInstalment = (1+(anInterestRate / periodMultiplier))*Amount ;*/
        while ((cin.fail()) || (n<0) /*|| (n> maxInstalment)*/)
        {
            cin.clear();
            cin.ignore();
            cout << "Please enter an appropriate periodic Instalment amount (positive and inferior to Loan Amount) : ";
            cin >> n;
        }
        return n;

    } // Safeguard for Instalment
    
    string CheckSchedule()
    {
        double n;
        string F;
        cout << "Please enter an appropriate Reimbursment Schedule. \n 1 for Annually, 2 for Semi-Annually, 3 for Quarterly and 4 for Monthly : ";
        cin >> n;
        n=floor ( n);
        if (n==1)
	    {
	        F ="Annually";
	    }
	    else if (n==2)
	    {
	        F ="Semi-Annually";
	    }
	    else if (n==3) 
	    {
	        F ="Quarterly";
	    }
	    else if (n==4)
	    {
	        F ="Monthly";
	    }
	    else
	    {     
            while ((cin.fail()) || n<0 || n>4)
            {
                cin.clear();
                cin.ignore();
                cout << "This is a wrong schedule ! \n Enter 1 for Annually, 2 for Semi-Annually, 3 for Quarterly and 4 for Monthly : " ;
                cin >> n;
                cout<<"\n";
                {
                    if (n==1)
            	    {
            	        F ="Annually";
            	    }
            	    else if (n==2)
            	    {
            	        F ="Semi-Annually";
            	    }
            	    else if (n==3) 
            	    {
            	        F ="Quarterly";
            	    }
            	    else if (n==4)
            	    {
            	        F ="Monthly";
            	    }
    	        }
            }
	    }
	    return F;
    } // Safeguard for Schedule

    double CheckIR()
    {
        double n;
        cout << "\nPlease provide ANNUAL Interest Rate (0.05 for 5%, between 0% and 100%) :";
        cin >> n;
        while ((cin.fail()) || (n < 0) || (n > 2))
        {
            cin.clear();
            cin.ignore();
            cout << "Please enter an appropriate ANNUAL Interest Rate (between 0 (0%) and 2 (200%)) : ";
            cin >> n;
        }
        return n;
    } // Safeguard for annual Interest rate
    
    double CheckYears()
    {
        double n;
        cout << "\nPlease provide number of Years (18,5 years equals to 18y and 6 months) :";
        cin >> n;
        while ((cin.fail()) || (n < 0))
        {
            cin.clear();
            cin.ignore();
            cout << "Please enter an appropriate number of Years : ";
            cin >> n;
        }
        return n;
    }

    double CheckMonth()
    {
        double n;
        cout << "\nPlease provide start Month (between 1(=January) and 12(=December)):";
        cin >> n;
        while ((cin.fail()) || (n < 1) || (n > 12))
        {
            cin.clear();
            cin.ignore();
            cout << "Please enter an appropriate starting Month (between 1(=January) and 12(=December)) : ";
            cin >> n;
            cout<<"\n";
            
        }
        return n;
    } // Safeguard for starting Month
    
    double CheckStartYear()
    {
        double n;
        cout << "\nPlease provide start Year :";
        cin >> n;
        while ((cin.fail()) || (n < 0))
        {
            cin.clear();
            cin.ignore();
            cout << "Please enter an appropriate starting Year (positive) : ";
            cin >> n;
        }
        return floor(n);
    } // Safeguard for starting Year
        
    double ComputPeriodMultiplier(string Frequency)
    {
    double n; 
    
        
    	    {   
        	    if (Frequency=="Annually" )
        	    {
        	        n = 1.00 ;    	        
        	    }
        	    else if (Frequency=="Semi-Annually")
        	    {
        	        n = 2.00;
        	    }
        	    else if (Frequency=="Quarterly")
        	    {
        	        n = 4.00 ;
        	    }
        	    else if (Frequency=="Monthly")
        	    {
        	        n = 12.00;
        	    } 
        	    
            	return n ;
    	    } 
    	    
} // Compute the period multiplier (12, 3, 2 or 1)
               
    void Display(double Amount, double Years, double anInterestRate, double Instalment, double NbOfPeriod, string Frequency, double startMonth, double startYear)
    {
        
            cout <<"\n      Inputs :"<< endl;
            cout <<"___________________________"<< endl;
            cout <<"| Present Value : $"<< Amount  << endl;
            cout <<"| Frequency : "<< Frequency << endl;
            cout <<"| # of periods : "<< NbOfPeriod << endl;
            cout <<"| Interest Rate : "<< anInterestRate*100 << "%"<< endl;
            cout <<"| Instalments : $"<< Instalment << endl;
            cout <<"| Start Date : "<< startMonth <<"/"<< startYear<< endl;
            cout <<"|__________________________" ;
    }
    
    void Display2(double periodNumber, double Amount, double periodInterestRate, double Instalment, double startMonth, double startYear, double principal, double periodInterest, double closingBalance)
    {
        cout<< periodNumber <<"  |   "<<startMonth <<"/"<< startYear << "  |   "<< Amount <<"  |   "<< principal << "  |  "<< periodInterest << "  |  "<< periodInterestRate * 100 << "%" << "  |   "<< Instalment << "   |  "<< closingBalance  <<"   |"<< endl;
    }
 
	    
    void Inputs()
    {
    // Declaring Variables
        double Amount, Instalment, NbOfPeriod, closingBalance, periodMultiplier = 0.00, anInterestRate, periodInterestRate ;
        double periodNumber, periodInterest, principal,Years, startMonth, startYear, temp ;   
        string Frequency;   
        
    // Inputs  
        cout << "We are entering the values we need ! "<< endl;
        Frequency = CheckSchedule();
        periodMultiplier = ComputPeriodMultiplier(Frequency);
        temp = whichMiss();
        
        if (temp == 1)
        {
            Years = CheckYears() ;
            anInterestRate = CheckIR();
            Instalment = CheckInstalment();
            Amount = findAmount(Years, anInterestRate, Instalment);
        }
        else if (temp == 2)
        {
            Amount = CheckAmount();        
            anInterestRate = CheckIR();
            Instalment = CheckInstalment();
            Years = findYears(Amount,anInterestRate, Instalment, periodMultiplier);
        }
        else if (temp == 3)
        {
            Amount = CheckAmount();        
            Years = CheckYears();
            Instalment = CheckInstalment();
            anInterestRate = findAnInterestRate(Amount, Years, Instalment, periodMultiplier);
        }
        else if (temp == 4)
        {
            Amount = CheckAmount();        
            Years = CheckYears() ;
            anInterestRate = CheckIR();
            Instalment = findInstalment(Amount, Years, anInterestRate, periodMultiplier);
        }
        
        startMonth = CheckMonth();
        startYear = CheckStartYear();
        NbOfPeriod = floor(Years * periodMultiplier);
        Display(Amount, Years, anInterestRate, Instalment, NbOfPeriod, Frequency, startMonth, startYear);
        periodInterestRate=anInterestRate/periodMultiplier ;
        
        

        if (principal < 0)
            {
                cout<< " ERROR : the annual interest rate is too important. Modify one of the inputs." ;
                cout << "\nPlease provide Present Value :";
                Amount = CheckAmount();
                cout << "Please provide Number of Years :";
                Years = CheckYears();
                cout << "Please provide ANNUAL Interest Rate :";
                anInterestRate = CheckIR();
                cout << "Please provide Instalments amount :";
                Instalment = CheckInstalment();
                principal = Instalment - Amount*periodInterestRate ;    
            }    
            periodNumber=1 ; 
        	principal = Instalment - Amount*periodInterestRate ;
        	closingBalance = Amount -principal;
            periodInterest = Amount*periodInterestRate ;

         // Initializing Variables 
        
        cout<< "\n| # |"<< " period |"<< " Op. Balance |"<< "  principal |"<<" interest |"<< "period IR|"<< "  instalment |"<< " closing Balance |" << endl;
                
                while(Amount > 0 ) 
                {
                    if (Amount - Instalment <= 0)
                    {
                        principal = Amount ;
                        
                        Instalment = Amount*periodInterestRate + principal ;
                        closingBalance = Amount - principal ;
                        
                        Display2( periodNumber,  Amount,  periodInterestRate,  Instalment,  startMonth,  startYear,  principal,  periodInterest, closingBalance);
                        closingBalance = Amount - principal ;
                        Amount = closingBalance ;
                        periodInterest = Amount*periodInterestRate ;
                        principal = Instalment - periodInterest ;
                        closingBalance=Amount-principal;  
                    }
                    else 
                    {
                        Display2( periodNumber,  Amount,  periodInterestRate,  Instalment,  startMonth,  startYear,  principal,  periodInterest, closingBalance);
                        {   
                            if (Frequency=="Monthly") 
                            {
                                if (startMonth+1 > 12)
                                {
                                    startMonth = (startMonth + 1 ) - 12 ;
                                    startYear++;
                                } 
                                else 
                                { 
                                    startMonth++;
                                    }
                            }
                            else if (Frequency=="Quarterly") 
                            {
                                if (startMonth+3 > 12)
                                {
                                    startMonth = (startMonth + 3 ) - 12 ;
                                    startYear++;
                                } 
                                else 
                                { 
                                    startMonth=startMonth+3;
                                }
                            }
                            else if (Frequency=="Semi-Annually") 
                            {
                                if (startMonth+6 > 12) 
                                {
                                    startMonth = (startMonth + 6 ) - 12 ;
                                    startYear++;
                                } 
                                else 
                                { 
                                    startMonth=startMonth+6;
                                }
                            }
                            else if (Frequency=="Annually") 
                            {
                                startYear++;
                            }
                            else
                            {
                                cout << "ERROR : The Reimbursment Schedule was wrongly computed. Try Again." << endl;
                            }
                        } // Change the date
                        closingBalance = Amount - principal ;
                        Amount = closingBalance ;
                        periodInterest = Amount*periodInterestRate ;
                        principal = Instalment - periodInterest ;
                        closingBalance=Amount-principal; 
                        
                    }
                    periodNumber++;
                    
                    
                }
                if (periodNumber < NbOfPeriod)
                    {
                        cout << "\nThe loan can be reimbursed before "<<Years<<" Years."<< endl;
                    }
                    else if (periodNumber > NbOfPeriod)
                    {
                        cout <<"\nThe loan cannot be reimbursed in "<<Years<<" Years. It can be reimbursed in "<< periodNumber/periodMultiplier <<" Years."<< endl;
                    }
            
    } // While loop displaying the table

     

int main() 
{
    Inputs();
    return 0;
}

